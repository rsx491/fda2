<?php
/**
 * @file Contains logic for content_browser_grid.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function content_browser_grid_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the content_browser_grid module.
    case 'help.page.content_browser_grid':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides a default Entity Browser for Nodes, using a Masonry grid.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter().
 */
function content_browser_grid_form_alter(&$form, FormStateInterface &$form_state) {
  if (isset($form['#form_id'])) {
    if ($form['#form_id'] == 'entity_browser_browse_content_grid_form') {
      // Attach our library.
      $form['#attached']['library'][] = 'content_browser_grid/view';
      $form['#attached']['library'][] = 'content_browser/view';

      // Style the submit button.
      $form['actions']['submit']['#value'] = t('Select Content');
      $form['actions']['submit']['#attributes']['class'][] = 'button--primary';
      $form['actions']['submit']['#attributes']['class'][] = 'entity-browser-modal-target';

      // Wrap actions so we can float them at the bottom of the browser.
      $form['actions_wrap'] = [
        '#type' => 'container',
        '#attributes' => [
          'class' => 'content-browser-actions',
        ],
        0 => $form['actions'],
      ];
      unset($form['actions']);

      // Add a class for generic styling.
      $form['#attributes']['class'][] = 'content-browser-form';
      $form['#attributes']['class'][] = 'content-browser-grid-form';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function content_browser_grid_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-content-browser-grid-node-entity-browser' ) {

  }
}

/**
 * Implements hook_library_info_alter().
 */
function content_browser_grid_library_info_alter(&$libraries, $extension) {
  // Optionally use the Libraries module to determine our library paths.
  if ($extension == 'content_browser_grid' && \Drupal::moduleHandler()->moduleExists('libraries')) {
    $masonry_path = libraries_get_path('masonry') . '/dist/masonry.pkgd.min.js';

    $libraries['masonry']['js'] = ['/' . $masonry_path => ['minified' => 'true']];
  }
}
