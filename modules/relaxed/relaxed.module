<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\relaxed\Entity\Endpoint;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;

/**
 * Implements hook_entity_insert().
 */
function relaxed_entity_insert(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'workspace') {
    // In some cases (mostly testing) the plugin manager is not yet initialized.
    // @todo {@link https://www.drupal.org/node/2599864 Fix this.}
    try {
      \Drupal::service('plugin.manager.rest')->clearCachedDefinitions();
      \Drupal::service('plugin.manager.endpoint')->clearCachedDefinitions();
    } catch (InvalidArgumentException $e) {
      watchdog_exception('relaxed', $e);
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function relaxed_entity_update(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'workspace') {
    // In some cases (mostly testing) the plugin manager is not yet initialized.
    // @todo {@link https://www.drupal.org/node/2599864 Fix this.}
    try {
      \Drupal::service('plugin.manager.rest')->clearCachedDefinitions();
      \Drupal::service('plugin.manager.endpoint')->clearCachedDefinitions();
    } catch (InvalidArgumentException $e) {
      watchdog_exception('relaxed', $e);
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function relaxed_entity_delete(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'workspace') {
    // In some cases (mostly testing) the plugin manager is not yet initialized.
    // @todo {@link https://www.drupal.org/node/2599864 Fix this.}
    try {
      \Drupal::service('plugin.manager.rest')->clearCachedDefinitions();
      \Drupal::service('plugin.manager.endpoint')->clearCachedDefinitions();
    } catch (InvalidArgumentException $e) {
      watchdog_exception('relaxed', $e);
    }
  }
}

/**
 * Implements hook_entity_access().
 */
function relaxed_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  /** @var \Drupal\multiversion\MultiversionManagerInterface $manager */
  $multiversion_manager = \Drupal::service('multiversion.manager');
  $entity_type = $entity->getEntityType();
  $entity_type_id = $entity_type->id();

  // Set entity access restrictions depending on pull and push permissions.
  if ($multiversion_manager->isEnabledEntityType($entity_type) || $entity_type_id == 'replication_log') {
    if ($operation == 'view') {
      return AccessResult::allowedIfHasPermissions($account, ['perform push replication', 'perform pull replication'], 'OR');
    }
    else {
      return AccessResult::allowedIfHasPermission($account, 'perform push replication');
    }
  }

  // No opinion.
  return AccessResult::neutral();
}

/**
 * Implements hook_entity_create_access().
 */
function multiversion_entity_create_access(AccountInterface $account, array $context, $entity_bundle) {
  /** @var \Drupal\multiversion\MultiversionManagerInterface $manager */
  $multiversion_manager = \Drupal::service('multiversion.manager');
  $bundles_info = \Drupal::service('entity_type.bundle.info')->getAllBundleInfo();
  foreach ($bundles_info as $entity_type_id => $bundles) {
    if (in_array($entity_bundle, array_keys($bundles))) {
      $entity_type = \Drupal::entityTypeManager()->getDefinition($entity_type_id);
      if ($multiversion_manager->isEnabledEntityType($entity_type) || $entity_type_id == 'replication_log') {
        return AccessResult::allowedIfHasPermission($account, 'perform push replication');
      }
    }
  }

  // No opinion.
  return AccessResult::neutral();
}

/**
 * Implements hook_entity_field_access().
 */
function relaxed_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  // Set entity access restrictions depending on pull and push permissions.
  if ($operation == 'view') {
    return AccessResult::allowedIfHasPermissions($account, ['perform push replication', 'perform pull replication'], 'OR');
  }
  else {
    return AccessResult::allowedIfHasPermission($account, 'perform push replication');
  }
}

/**
 * Implements hook_requirements().
 */
function relaxed_requirements($phase) {
  if ($phase === 'runtime') {
    $requirements = [];
    $endpoint_checks = \Drupal::service('plugin.manager.endpoint_check')->runAll();
    foreach ($endpoint_checks as $endpoint_id => $checks) {
      $endpoint = Endpoint::load($endpoint_id);
      $severity = true;
      $messages = [];
      foreach ($checks as $check_id => $check) {
        $messages[] = $check['message'];
        $severity = $check['result'] ? true : false;
      }
      $build = [
        '#theme' => 'item_list',
        '#items' => $messages,
      ];
      $description = \Drupal::service('renderer')->render($build);
      $requirements[$endpoint_id] = [
        'title' => t('Relaxed Endpoint: @endpoint', ['@endpoint' => $endpoint->label()]),
        'description' => $description,
        'severity' => $severity ? REQUIREMENT_OK : REQUIREMENT_ERROR,
      ];
    }

    return $requirements;
  }
}
